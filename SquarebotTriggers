//Do not edit this file directly.
//Each day make a new file such as SquarebotAnalogStickExperiments and then "merge" with this 
//file at the end of the day with everybody

//Make a new file from the plus in the top left. Add title and make sure to enable TelOp mode
//Copy the master code to your new file, making sure to change the names on line 25 and 26

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

@TeleOp(name = "SquarebotTriggers")
public class SquarebotTriggers extends OpMode {
    DcMotor lf, lb, rf, rb;
    TouchSensor touchSensor;
    double speedMultiplier = 1;

    public void init() {
        lf = hardwareMap.get(DcMotor.class, "lf");
        lb = hardwareMap.get(DcMotor.class, "lb");
        rf = hardwareMap.get(DcMotor.class, "rf");
        rb = hardwareMap.get(DcMotor.class, "rb");

        rf.setDirection(DcMotor.Direction.REVERSE);
        rb.setDirection(DcMotor.Direction.REVERSE);
        
        telemetry.setAutoClear(false);
    }

    public void loop() {
        telemetry.addData("test", gamepad1.left_stick_x);
        telemetry.update();
        
        if (gamepad1.left_stick_x == 0 &&
            gamepad1.left_stick_y == 0 &&
            gamepad1.right_stick_x == 0 &&
            gamepad1.right_stick_y == 0)
        {
            lf.setPower(0);
            rf.setPower(0);
            lb.setPower(0);
            rb.setPower(0);
        }
        
        StickState currentState = StickState.NO_STATE;
        
        {
          double xDiff = Math.abs(gamepad1.left_stick_x);
          double yDiff = Math.abs(gamepad1.left_stick_y);
          
          if (xDiff > yDiff)
          {
            if (gamepad1.left_stick_x > 0)
            {
              currentState = StickState.TURN_RIGHT;
            } else if (gamepad1.left_stick_x < 0) {
              currentState = StickState.TURN_LEFT;
            }
          } else {
            if (gamepad1.left_stick_y > 0)
            {
              currentState = StickState.FORWARD;
            } else if (gamepad1.left_stick_y < 0) {
              currentState = StickState.BACKWARD;
            }
          }
        }
        
        
        if (currentState == StickState.FORWARD) {
            lf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            lb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
        } else if (currentState == StickState.BACKWARD) {
            lf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            lb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
        } else if (currentState == StickState.TURN_RIGHT) {
            lf.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
            lb.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
        } else if (currentState == StickState.TURN_LEFT) {
            lf.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
            lb.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
        } else if (gamepad1.b) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.x) {
            lf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_up) {
            lf.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.dpad_down) {
            lf.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_right) {
            lf.setPower(-1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_left) {
            lf.setPower(1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.right_stick_x > 0) {
            lf.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
            lb.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rb.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
        } else if (gamepad1.right_stick_x < 0) {
            lf.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
            lb.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rb.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
        } else if (gamepad1.b) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.x) {
            lf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.right_trigger == 1) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.left_trigger == 1) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else {
            lf.setPower(0);
            rf.setPower(0);
            lb.setPower(0);
            rb.setPower(0);
        }
    }
}
