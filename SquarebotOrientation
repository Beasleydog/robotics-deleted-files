package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import com.qualcomm.robotcore.hardware.DcMotor;

@TeleOp(name = "SquarebotOrientation (Blocks to Java)")
public class SquarebotOrientation extends OpMode {

  private BNO055IMU imu;
    Telemetry.Item testTelemetry;
DcMotor lf, lb, rf, rb;
    double speedMultiplier = 1;
  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  
  public void init() {
       lf = hardwareMap.get(DcMotor.class, "lf");
        lb = hardwareMap.get(DcMotor.class, "lb");
        rf = hardwareMap.get(DcMotor.class, "rf");
        rb = hardwareMap.get(DcMotor.class, "rb");
        rf.setDirection(DcMotor.Direction.REVERSE);
        rb.setDirection(DcMotor.Direction.REVERSE);
    imu = hardwareMap.get(BNO055IMU.class, "imu");
    initIMU();
    
    // Put initialization blocks here.
    
  }

  /**
   * Describe this function...
   */
  private void initIMU() {
    BNO055IMU.Parameters IMUparameters;

    IMUparameters = new BNO055IMU.Parameters();
    IMUparameters.mode = BNO055IMU.SensorMode.IMU;
    IMUparameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
    IMUparameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
    telemetry.addData("Status", "Ini'ing");
    telemetry.update();
    imu.initialize(IMUparameters);
    telemetry.addData("Status", "Intialized");
    telemetry.update();
    testTelemetry = telemetry.addData("count", 0);

  }
  public void loop() {
  testTelemetry.setValue(imu.getAngularOrientation());
  telemetry.update();
  
  
  if (gamepad1.left_stick_x == 0 &&
            gamepad1.left_stick_y == 0 &&
            gamepad1.right_stick_x == 0 &&
            gamepad1.right_stick_y == 0)
        {
            lf.setPower(0);
            rf.setPower(0);
            lb.setPower(0);
            rb.setPower(0);
        }
        
        StickState currentState = StickState.NO_STATE;
        
        {
          double xDiff = Math.abs(gamepad1.left_stick_x);
          double yDiff = Math.abs(gamepad1.left_stick_y);
          
          if (xDiff > yDiff)
          {
            if (gamepad1.left_stick_x > 0)
            {
              currentState = StickState.TURN_RIGHT;
            } else if (gamepad1.left_stick_x < 0) {
              currentState = StickState.TURN_LEFT;
            }
          } else {
            if (gamepad1.left_stick_y > 0)
            {
              currentState = StickState.FORWARD;
            } else if (gamepad1.left_stick_y < 0) {
              currentState = StickState.BACKWARD;
            }
          }
        }
        
        
        if (currentState == StickState.FORWARD) {
            lf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            lb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
        } else if (currentState == StickState.BACKWARD) {
            lf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            lb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
        } else if (currentState == StickState.TURN_RIGHT) {
            lf.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
            lb.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
        } else if (currentState == StickState.TURN_LEFT) {
            lf.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
            lb.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
        } else if (gamepad1.b) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.x) {
            lf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_up) {
            lf.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.dpad_down) {
            lf.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_right) {
            lf.setPower(-1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_left) {
            lf.setPower(1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.right_stick_x > 0) {
            lf.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
            lb.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rb.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
        } else if (gamepad1.right_stick_x < 0) {
            lf.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
            lb.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rb.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
        } else if (gamepad1.b) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.x) {
            lf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else {
            lf.setPower(0);
            rf.setPower(0);
            lb.setPower(0);
            rb.setPower(0);
        }
  }
}
