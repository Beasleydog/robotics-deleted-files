//Check CODINGRULES.txt before coding

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.Gyroscope;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

//est

@TeleOp(name = "SquarebotTelemetry")
public class SquarebotTelemetry extends OpMode {
    DcMotor lf, lb, rf, rb;
    TouchSensor touchSensor;
    TouchSensor sensor;
    double speedMultiplier = 1;
    Telemetry.Item testTelemetry;
    Gyroscope gyroscope;

    public void init() {
        lf = hardwareMap.get(DcMotor.class, "lf");
        lb = hardwareMap.get(DcMotor.class, "lb");
        rf = hardwareMap.get(DcMotor.class, "rf");
        rb = hardwareMap.get(DcMotor.class, "rb");
        sensor = hardwareMap.touchSensor.get("ts");
        rf.setDirection(DcMotor.Direction.REVERSE);
        rb.setDirection(DcMotor.Direction.REVERSE);
        
        telemetry.setAutoClear(true); 
        testTelemetry = telemetry.addData("count", 0);
    }

    public void loop() {
        testTelemetry.setValue(sensor.isPressed());
        telemetry.update();
        
        if (sensor.isPressed())
        {
            lf.setPower(2);
            rf.setPower(2);
            lb.setPower(2);
            rb.setPower(2);
        }
        
        if (gamepad1.left_stick_x == 0 &&
            gamepad1.left_stick_y == 0 &&
            gamepad1.right_stick_x == 0 &&
            gamepad1.right_stick_y == 0)
        {
            lf.setPower(0);
            rf.setPower(0);
            lb.setPower(0);
            rb.setPower(0);
        }
        
        StickState currentState = StickState.NO_STATE;
        
        {
          double xDiff = Math.abs(gamepad1.left_stick_x);
          double yDiff = Math.abs(gamepad1.left_stick_y);
          
          if (xDiff > yDiff)
          {
            if (gamepad1.left_stick_x > 0)
            {
              currentState = StickState.TURN_RIGHT;
            } else if (gamepad1.left_stick_x < 0) {
              currentState = StickState.TURN_LEFT;
            }
          } else {
            if (gamepad1.left_stick_y > 0)
            {
              currentState = StickState.FORWARD;
            } else if (gamepad1.left_stick_y < 0) {
              currentState = StickState.BACKWARD;
            }
          }
        }
        
        
        if (currentState == StickState.FORWARD) {
            lf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            lb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
        } else if (currentState == StickState.BACKWARD) {
            lf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            lb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_y);
        } else if (currentState == StickState.TURN_RIGHT) {
            lf.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
            lb.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
        } else if (currentState == StickState.TURN_LEFT) {
            lf.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
            lb.setPower(-1 * speedMultiplier * gamepad1.left_stick_x);
            rb.setPower(1 * speedMultiplier * gamepad1.left_stick_x);
        } else if (gamepad1.b) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.x) {
            lf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_up) {
            lf.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.dpad_down) {
            lf.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_right) {
            lf.setPower(-1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else if (gamepad1.dpad_left) {
            lf.setPower(1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.right_stick_x > 0) {
            lf.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
            lb.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rb.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
        } else if (gamepad1.right_stick_x < 0) {
            lf.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
            lb.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rf.setPower(1 * speedMultiplier * gamepad1.right_stick_x);
            rb.setPower(-1 * speedMultiplier * gamepad1.right_stick_x);
        } else if (gamepad1.b) {
            lf.setPower(-1 * speedMultiplier);
            lb.setPower(1 * speedMultiplier);
            rf.setPower(1 * speedMultiplier);
            rb.setPower(-1 * speedMultiplier);
        } else if (gamepad1.x) {
            lf.setPower(1 * speedMultiplier);
            lb.setPower(-1 * speedMultiplier);
            rf.setPower(-1 * speedMultiplier);
            rb.setPower(1 * speedMultiplier);
        } else {
            lf.setPower(0);
            rf.setPower(0);
            lb.setPower(0);
            rb.setPower(0);
        }
    }
}
